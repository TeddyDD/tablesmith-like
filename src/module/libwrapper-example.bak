  async _addTable() {
    Logger.debug(false, 'adding table to tables');
    if (data.selected) {
      let rollTable = findTable(data.selected.name);
      if (!rollTable) {
        rollTable = await RollTable.create({ name: data.selected.name });
        Logger.debug(false, 'created RollTable', rollTable);
      }
      const content = data.selected.getContent();
      rollTable?.setFlag(TABLESMITH_ID, TABLE_CONTENT_FLAG, content);
      Logger.debug(false, 'updated Flag on table', TABLE_CONTENT_FLAG, rollTable, content);
    } else Logger.warn(false, 'No table selected!');
  }

Hooks.once('ready', async () => {
  // Do anything once the module is ready
  const tablesmithModuleData = getGame().modules.get(TABLESMITH_ID) as unknown as TablesmithModuleData;
  tablesmithModuleData.api = new TablesmithApi();
  libWrapper.register(TABLESMITH_ID, 'RollTable.prototype.draw', drawWrapper, 'MIXED');
});

function drawWrapper(
  this: RollTable,
  wrapped: (options: {
    roll: Roll;
    recursive: boolean;
    results: Array<TableResult>;
    displayChat: boolean;
    rollMode: string;
  }) => Promise<RollTableDraw>,
  options: {
    roll: Roll;
    recursive: boolean;
    results: Array<TableResult>;
    displayChat: boolean;
    rollMode: string;
  },
) {
  const name = this.name;
  const content = this.getFlag(TABLESMITH_ID, TABLE_CONTENT_FLAG) as string;
  Logger.debug(false, 'wrapped call to draw: ', name);
  if (content && name) {
    Logger.debug(false, 'TableSmith Table', name);
    tablesmith.addTable(name, content);
    Logger.debug(false, tablesmith.evaluate(`[${name}.Start]`));
  }
  return wrapped(options);
}